{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "teamcityVersion": {
      "type": "string",
      "defaultValue": "2020.1",
      "allowedValues": [
        "2020.1",
        "2019.2.4",
        "2019.2.3",
        "2019.2.2",
        "2019.2.1",
        "2019.2",
        "2019.1.5",
        "2019.1.4",
        "2019.1.3",
        "2019.1.2",
        "2019.1.1",
        "2019.1",
        "2018.2.4",
        "2018.2.3",
        "2018.2.2",
        "2018.2.1",
        "2018.2",
        "2018.1.5",
        "2018.1.4",
        "2018.1.3",
        "2018.1.2",
        "2018.1.1",
        "2018.1"
      ],
      "metadata": {
        "description": "The version of TeamCity"
      }
    },
    "installationSize": {
      "type": "string",
      "defaultValue": "Medium",
      "allowedValues": [
        "Small",
        "Medium",
        "Large"
      ],
      "metadata": {
        "description": "TeamCity installation size: typical usage for Small - 3 users, 100 builds/day; Medium - 5 users, 300 builds/day; Large - 20 users, 1000 builds/day"
      }
    },
    "VMAdminUsername": {
      "type": "string",
      "defaultValue": "core",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "SSHKeyData": {
      "type": "secureString",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "databasePassword": {
      "type": "secureString",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Your password must contain at least 8 characters: a number, a special symbol, an upper and lower case letter."
      }
    },
    "domainOwnerEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "E-mail address to report problems regarding SSL certificate issuing for domain."
      }
    }
  },
  "variables": {
    "publicIpName": "teamcity-pip",
    "publicIpDns": "[concat('teamcity-', uniqueString(resourceGroup().id))]",
    "virtualNetworkName": "teamcity-vnet",
    "networkName": "teamcity-net",
    "networkSubnet": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/default')]",
    "networkSecurityGroupName": "teamcity-nsg",
    "vmName": "teamcity",
    "vmSize": "[if(equals(parameters('installationSize'), 'Small'), 'Standard_A2_v2', if(equals(parameters('installationSize'), 'Medium'), 'Standard_F2s', 'Standard_F4s'))]",
    "vmDataDisk": "[if(equals(parameters('installationSize'), 'Small'), 32, if(equals(parameters('installationSize'), 'Medium'), 64, 128))]",
    "storageType": "[if(contains(toLower(substring(variables('VMSize'), 9)), 's'), 'Premium_LRS', 'Standard_LRS')]",
    "sshKeyPath": "[concat('/home/',parameters('VMAdminUsername'),'/.ssh/authorized_keys')]",
    "dbServerName": "[concat('teamcity-', uniqueString(resourceGroup().id))]",
    "dbName": "teamcitydb",
    "databaseSku": "[if(equals(parameters('installationSize'), 'Small'), 'B_Gen5_1', if(equals(parameters('installationSize'), 'Medium'), 'B_Gen5_2', 'GP_Gen5_2'))]",
    "databaseTier": "[if(equals(parameters('installationSize'), 'Small'), 'Basic', if(equals(parameters('installationSize'), 'Medium'), 'Basic', 'GeneralPurpose'))]",
    "databaseCapacity": "[if(equals(parameters('installationSize'), 'Small'), 1, if(equals(parameters('installationSize'), 'Medium'), 2, 2))]",
    "databaseSizeMB": "[if(equals(parameters('installationSize'), 'Small'), 51200, if(equals(parameters('installationSize'), 'Medium'), 51200, 128000))]",
    "storageAccountName": "[concat('teamcity', uniqueString(resourceGroup().id))]",
    "contributorRoleId": "[guid(resourceId('Microsoft.Compute/virtualMachines/', variables('vmName')))]",
    "storageContributorRoleId": "[guid(concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmName')),'storage'))]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "pid-d8b0956f-6ab9-45ed-9555-e1addddc11bf",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-08-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIpDns')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-08-01",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/24"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1020,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "default-allow-http",
            "properties": {
              "priority": 1010,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80"
            }
          },
          {
            "name": "default-allow-https",
            "properties": {
              "priority": 1000,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "apiVersion": "2016-09-01",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('vmName'), '-config')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName'))]"
              },
              "subnet": {
                "id": "[variables('networkSubnet')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.DBforMySQL/servers",
      "name": "[variables('dbServerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-12-01",
      "properties": {
        "version": "5.7",
        "administratorLogin": "teamcity",
        "administratorLoginPassword": "[parameters('databasePassword')]",
        "storageProfile": {
          "storageMB": "[variables('databaseSizeMB')]",
          "geoRedundantBackup": "Disabled"
        },
        "sslEnforcement": "Disabled"
      },
      "sku": {
        "name": "[variables('databaseSku')]",
        "tier": "[variables('databaseTier')]",
        "capacity": "[variables('databaseCapacity')]",
        "size": "[variables('databaseSizeMB')]",
        "family": "Gen5"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "firewall",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "databases",
          "name": "[variables('dbName')]",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "charset": "utf8",
            "collation": "utf8_general_ci"
          }
        },
        {
          "type": "configurations",
          "name": "long_query_time",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "5",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "name": "slow_query_log",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "ON",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "name": "max_allowed_packet",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "16777216",
            "source": "user-override"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "stable",
        "product": "flatcar-container-linux",
        "publisher": "kinvolk"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkName'))]",
        "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "apiVersion": "2017-12-01",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('VMAdminUsername')]",
          "customData": "[base64(concat('#cloud-config\r\nwrite_files:\r\n  - path: \"/etc/teamcity/update.sh\"\r\n    permissions: 0755\r\n    content: |\r\n      #!/bin/bash\r\n      while true\r\n      do\r\n        STATUS=$(curl -s -o /etc/teamcity/tags -w ''%{http_code}'' -H Metadata:true \"http://169.254.169.254/metadata/instance/compute/tags?api-version=2017-08-01&format=text\")\r\n        if [ $STATUS -eq 200 ]; then\r\n          VERSION=$(cat /etc/teamcity/tags | sed -n ''s/.*teamcity-version\\:\\([^;]\\+\\).*/\\1/p'')\r\n          if [[ ! -z \"$VERSION\" ]]; then\r\n            TEAMCITY_VERSION=\"TEAMCITY_VERSION=$VERSION\"\r\n            CURRENT_VERSION=$(cat /etc/teamcity/version)\r\n            if [ \"$TEAMCITY_VERSION\" != \"$CURRENT_VERSION\" ]; then\r\n                echo \"TeamCity version has changed to $VERSION\"\r\n                echo \"$TEAMCITY_VERSION\" > /etc/teamcity/version\r\n                /usr/bin/docker pull jetbrains/teamcity-server:${VERSION}\r\n                /usr/bin/docker pull jetbrains/teamcity-agent:${VERSION}\r\n            fi\r\n          fi\r\n        fi\r\n        sleep 60\r\n      done\r\n  - path: \"/etc/teamcity/database.properties\"\r\n    content: |\r\n      # Database: MySQL\r\n\r\n      connectionUrl=jdbc:mysql://',reference(resourceId('Microsoft.DBforMySQL/servers',variables('dbServerName'))).fullyQualifiedDomainName,'/',variables('dbName'),'?useSSL=true&requireSSL=false\r\n      connectionProperties.user=teamcity@',reference(resourceId('Microsoft.DBforMySQL/servers',variables('dbServerName'))).fullyQualifiedDomainName,'\r\n      connectionProperties.password=',replace(parameters('databasePassword'), '\\\\', '\\\\\\\\'),'\r\n\r\n      maxConnections=50\r\n      testOnBorrow=true\r\n  - path: \"/etc/teamcity/disabled-plugins.xml\"\r\n    content: |\r\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n      <disabled-plugins>\r\n        <disabled-plugin name=\"cloud-amazon\" />\r\n        <disabled-plugin name=\"s3-artifact-storage\" />\r\n        <disabled-plugin name=\"vsphere\" />\r\n      </disabled-plugins>\r\n  - path: \"/etc/teamcity/hostname\"\r\n    content: |\r\n      DOMAIN_NAME=',reference(variables('publicIpName')).dnsSettings.fqdn,'\r\n  - path: \"/etc/teamcity/check-certificate.sh\"\r\n    permissions: 0755\r\n    content: |\r\n      #!/bin/bash\r\n      attempt=0\r\n      while docker exec letsencrypt /app/cert_status | grep ${DOMAIN_NAME} > /dev/null; [[ $? -ne 0 ]]; do\r\n        retry_in_mins=$((3**$attempt))\r\n        echo \"Will try to renew certificate for ${DOMAIN_NAME} in $retry_in_mins minutes\"\r\n        sleep $((60 * $retry_in_mins))\r\n        echo \"Trying to renew certificate for ${DOMAIN_NAME}...\"\r\n        docker exec letsencrypt /app/signal_le_service\r\n        sleep 30\r\n        attempt=$(($attempt + 1))\r\n      done\r\n  - path: \"/etc/teamcity/download-file.sh\"\r\n    permissions: 0755\r\n    content: |\r\n      #!/bin/bash\r\n      attempt=0\r\n      until $(curl --output $2 --silent --fail $1); do\r\n        retry_in_secs=$((3**$attempt))\r\n        echo \"Will try to download file $1 in $retry_in_secs minutes\"\r\n        sleep $retry_in_secs\r\n        echo \"Trying to download file $1...\"\r\n        attempt=$(($attempt + 1))\r\n      done\r\n  - path: \"/etc/flatcar/update.conf\"\r\n    content: |\r\n      REBOOT_STRATEGY=\"off\"\r\ncoreos:\r\n  units:\r\n    - name: \"format-mnt-data.service\"\r\n      enable: true\r\n      content: |\r\n        [Unit]\r\n        Requires=network-online.target\r\n        Before=teamcity-server.service mnt-data.mount\r\n        RequiresMountsFor=/dev/mapper\r\n        ConditionPathExists=!/dev/mapper/app-data\r\n\r\n        [Service]\r\n        Type=oneshot\r\n        ExecStart=/bin/bash -c \\\r\n          ''/usr/sbin/pvcreate /dev/disk/azure/scsi1/lun0 && \\\r\n          /usr/sbin/vgcreate app /dev/disk/azure/scsi1/lun0 && \\\r\n          /usr/sbin/lvcreate -l 100%%FREE -n data app && \\\r\n          /usr/sbin/mkfs.ext4 /dev/mapper/app-data''\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"mnt-data.mount\"\r\n      enable: true\r\n      content: |\r\n        [Unit]\r\n        Before=teamcity-server.service\r\n        After=format-mnt-data.service\r\n        Requires=format-mnt-data.service\r\n        ConditionVirtualization=!container\r\n        Conflicts=umount.target\r\n        [Mount]\r\n        What=/dev/mapper/app-data\r\n        Where=/mnt/data\r\n        Type=ext4\r\n        Options=\r\n        [Install]\r\n        RequiredBy=teamcity-server.service\r\n    - name: \"get-mysql-connector.service\"\r\n      enable: true\r\n      content: |\r\n        [Unit]\r\n        Before=teamcity-server.service\r\n        After=mnt-data.mount\r\n        Requires=mnt-data.mount\r\n        ConditionPathExists=!/mnt/data/teamcity-server/data/lib/jdbc/mysql-connector-java-bin.jar\r\n\r\n        [Service]\r\n        Type=oneshot\r\n        ExecStart=/bin/mkdir -p /mnt/data/teamcity-server/data/lib/jdbc\r\n        ExecStart=/bin/bash /etc/teamcity/download-file.sh \\\r\n          http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar \\\r\n          /mnt/data/teamcity-server/data/lib/jdbc/mysql-connector-java-bin.jar\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"get-azure-plugins.service\"\r\n      enable: true\r\n      content: |\r\n        [Unit]\r\n        Before=teamcity-server.service\r\n        After=mnt-data.mount\r\n        Requires=mnt-data.mount\r\n        ConditionPathExists=!/mnt/data/teamcity-server/data/plugins/azure-plugins.txt\r\n\r\n        [Service]\r\n        Type=oneshot\r\n        ExecStart=/bin/mkdir -p /mnt/data/teamcity-server/data/plugins\r\n        ExecStart=/bin/bash /etc/teamcity/download-file.sh \\\r\n          https://raw.githubusercontent.com/JetBrains/teamcity-azure-template/master/azure-plugins.txt \\\r\n          /mnt/data/teamcity-server/data/plugins/azure-plugins.txt\r\n        ExecStart=/bin/bash -c ''cd /mnt/data/teamcity-server/data/plugins && curl -K azure-plugins.txt''\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"prepare-config.service\"\r\n      enable: true\r\n      content: |\r\n        [Unit]\r\n        Before=teamcity-server.service\r\n        After=mnt-data.mount\r\n        Requires=mnt-data.mount network-online.target\r\n        ConditionPathExists=!/mnt/data/teamcity-server/data/config\r\n\r\n        [Service]\r\n        Type=oneshot\r\n        ExecStart=/bin/mkdir -p /mnt/data/teamcity-server/data/config\r\n        ExecStart=/bin/mv /etc/teamcity/database.properties /mnt/data/teamcity-server/data/config/\r\n        ExecStart=/bin/mv /etc/teamcity/disabled-plugins.xml /mnt/data/teamcity-server/data/config/\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"teamcity-update.service\"\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        After=docker.service\r\n        Before=teamcity-server.service teamcity-agent.service\r\n        Requires=docker.service network-online.target\r\n\r\n        [Service]\r\n        ExecStart=/bin/sh /etc/teamcity/update.sh\r\n        Restart=always\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"teamcity-server.service\"\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        Description=TeamCity Server\r\n        After=docker.service mnt-data.mount get-mysql-connector.service get-azure-plugins.service prepare-config.service teamcity-update.service letsencrypt.service\r\n        Requires=docker.service mnt-data.mount get-mysql-connector.service get-azure-plugins.service prepare-config.service teamcity-update.service letsencrypt.service\r\n\r\n        [Service]\r\n        TimeoutStartSec=1200s\r\n        EnvironmentFile=/etc/teamcity/version\r\n        EnvironmentFile=/etc/teamcity/hostname\r\n        ExecStartPre=/bin/sh -c \"docker images --filter ''before=jetbrains/teamcity-server:${TEAMCITY_VERSION}'' --format ''{{.ID}} {{.Repository}}'' | grep ''jetbrains/teamcity-server'' | grep -Eo ''^[^ ]+'' | xargs -r docker rmi\"\r\n        ExecStartPre=/usr/bin/docker create \\\r\n          -e TEAMCITY_SERVER_MEM_OPTS=\"-Xmx$(($(grep MemTotal /proc/meminfo | awk ''{print $2}'') / 2))k -XX:MaxPermSize=270m -XX:ReservedCodeCacheSize=350m\" \\\r\n          -e VIRTUAL_PORT=8111 \\\r\n          -e VIRTUAL_HOST=${DOMAIN_NAME} \\\r\n          -e LETSENCRYPT_HOST=${DOMAIN_NAME} ',if(empty(parameters('domainOwnerEmail')),'',concat('-e LETSENCRYPT_EMAIL=',parameters('domainOwnerEmail'))),' \\\r\n          -v /mnt/data/teamcity-server/data:/data/teamcity_server/datadir \\\r\n          -v /mnt/data/teamcity-server/logs:/opt/teamcity/logs \\\r\n          -v /mnt/resource/teamcity-server/temp:/opt/teamcity/temp \\\r\n          --name teamcity-server \\\r\n          jetbrains/teamcity-server:${TEAMCITY_VERSION}\r\n        ExecStartPre=/bin/sh -c \"echo ''azure'' > dist && docker cp dist teamcity-server:/opt/teamcity/webapps/ROOT/WEB-INF/DistributionType.txt && rm dist\"\r\n        ExecStart=/usr/bin/docker start teamcity-server -a\r\n        ExecStop=-/usr/bin/docker exec teamcity-server /opt/teamcity/bin/teamcity-server.sh stop 60\r\n        ExecStopPost=-/usr/bin/docker stop teamcity-server\r\n        ExecStopPost=-/usr/bin/docker rm teamcity-server\r\n        Restart=always\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"teamcity-agent.service\"\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        Description=TeamCity Agent\r\n        After=teamcity-server.service teamcity-update.service\r\n        Requires=docker.service teamcity-server.service teamcity-update.service\r\n\r\n        [Service]\r\n        TimeoutStartSec=1200s\r\n        EnvironmentFile=/etc/teamcity/version\r\n        EnvironmentFile=/etc/teamcity/hostname\r\n        ExecStartPre=/bin/sh -c \"docker images --filter ''before=jetbrains/teamcity-agent:${TEAMCITY_VERSION}'' --format ''{{.ID}} {{.Repository}}'' | grep ''jetbrains/teamcity-agent'' | grep -Eo ''^[^ ]+'' | xargs -r docker rmi\"\r\n        ExecStart=/usr/bin/docker run \\\r\n          -v /mnt/data/teamcity-agent/conf:/opt/buildagent/conf \\\r\n          -v /mnt/data/teamcity-agent/logs:/opt/buildagent/logs \\\r\n          -v /mnt/data/teamcity-agent/plugins:/opt/buildagent/plugins \\\r\n          -v /mnt/data/teamcity-agent/system:/opt/buildagent/system \\\r\n          -v /mnt/resource/teamcity-agent/temp:/opt/buildagent/temp \\\r\n          -v /mnt/resource/teamcity-server/temp:/opt/teamcity/temp \\\r\n          -v /mnt/data/teamcity-agent/tools:/opt/buildagent/tools \\\r\n          --privileged \\\r\n          -e DOCKER_IN_DOCKER=start \\\r\n          -e SERVER_URL=https://${DOMAIN_NAME} \\\r\n          -e AGENT_NAME=Default \\\r\n          --name teamcity-agent \\\r\n          jetbrains/teamcity-agent:${TEAMCITY_VERSION}\r\n        ExecStop=-/usr/bin/docker exec teamcity-agent /opt/buildagent/bin/agent.sh stop\r\n        ExecStopPost=-/usr/bin/docker stop teamcity-agent\r\n        ExecStopPost=-/usr/bin/docker rm teamcity-agent\r\n        Restart=always\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"nginx.service\"\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        Description=NGINX reverse proxy\r\n        Requires=docker.service\r\n\r\n        [Service]\r\n        TimeoutStartSec=1200s\r\n        ExecStartPre=/bin/mkdir -p /opt/domains/certs\r\n        ExecStartPre=/bin/mkdir -p /opt/domains/vhost.d\r\n        ExecStartPre=/bin/mkdir -p /opt/domains/nginx/html\r\n        ExecStart=/usr/bin/docker run \\\r\n          -p 80:80 \\\r\n          -p 443:443 \\\r\n          -v /opt/domains/certs:/etc/nginx/certs:ro \\\r\n          -v /opt/domains/vhost.d:/etc/nginx/vhost.d \\\r\n          -v /opt/domains/nginx/html:/usr/share/nginx/html \\\r\n          -v /var/run/docker.sock:/tmp/docker.sock:ro \\\r\n          --name nginx \\\r\n          jwilder/nginx-proxy\r\n        ExecStop=-/usr/bin/docker stop nginx\r\n        ExecStopPost=-/usr/bin/docker rm nginx\r\n        Restart=always\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"letsencrypt.service\"\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        Description=Let''s Encrypt\r\n        Requires=docker.service nginx.service\r\n        After=nginx.service\r\n\r\n        [Service]\r\n        TimeoutStartSec=1200s\r\n        ExecStart=/usr/bin/docker run \\\r\n          -v /opt/domains/certs:/etc/nginx/certs:rw \\\r\n          --volumes-from nginx \\\r\n          -v /var/run/docker.sock:/var/run/docker.sock:ro \\\r\n          --name letsencrypt \\\r\n          jrcs/letsencrypt-nginx-proxy-companion\r\n        ExecStop=-/usr/bin/docker stop letsencrypt\r\n        ExecStopPost=-/usr/bin/docker rm letsencrypt\r\n        Restart=always\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target\r\n    - name: \"report-waiter-status.service\"\r\n      enable: true\r\n      command: \"start\"\r\n      content: |\r\n        [Unit]\r\n        Requires=docker.service teamcity-server.service nginx.service letsencrypt.service\r\n        ConditionPathExists=!/etc/teamcity/waiter\r\n\r\n        [Service]\r\n        Type=oneshot\r\n        EnvironmentFile=/etc/teamcity/hostname\r\n        ExecStartPre=/bin/bash /etc/teamcity/check-certificate.sh\r\n        ExecStart=/bin/bash -c \"until $(curl --output /dev/null --silent --fail https://${DOMAIN_NAME}); do echo ''Waiting for success response from ${DOMAIN_NAME}''; sleep 10; done;\"\r\n        ExecStartPost=/bin/touch /etc/teamcity/waiter\r\n\r\n        [Install]\r\n        WantedBy=multi-user.target'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('SSHKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "kinvolk",
            "offer": "flatcar-container-linux",
            "sku": "stable",
            "version": "2345.3.1"
          },
          "osDisk": {
            "name": "[concat(variables('vmName'), '-os')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('storageType')]"
            }
          },
          "dataDisks": [
            {
              "name": "[concat(variables('vmName'), '-data')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "diskSizeGB": "[variables('vmDataDisk')]",
              "lun": 0,
              "managedDisk": {
                "storageAccountType": "[variables('storageType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkName'))]"
            }
          ]
        }
      },
      "identity": {
        "type": "systemAssigned"
      },
      "tags": {
        "teamcity-version": "[toLower(trim(parameters('teamcityVersion')))]"
      }
    },
    {
      "apiVersion": "2016-07-01",
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[variables('contributorRoleId')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', variables('vmName')), '2017-03-30', 'Full').identity.principalId]",
        "scope": "[concat(subscription().id, '/resourceGroups/', resourceGroup().name)]"
      }
    }
  ],
  "outputs": {
    "teamcityURL": {
      "type": "string",
      "value": "[concat('https://', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    },
    "SSH": {
      "type": "string",
      "value": "[concat('ssh ', parameters('VMAdminUsername'), '@', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    }
  }
}
