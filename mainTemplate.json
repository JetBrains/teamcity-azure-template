{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location to for the resources."
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "The name of TeamCity virtual machine"
      }
    },
    "teamcityVersion": {
      "type": "string",
      "metadata": {
        "description": "The version of TeamCity"
      }
    },
    "installationSize": {
      "type": "string",
      "defaultValue": "Medium",
      "allowedValues": [
        "Small",
        "Medium",
        "Large"
      ],
      "metadata": {
        "description": "TeamCity installation size: typical usage for Small - 3 users, 100 builds/day; Medium - 5 users, 300 builds/day; Large - 20 users, 1000 builds/day"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size for the Virtual Machine."
      }
    },
    "VMAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine"
      }
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine"
      }
    },
    "databasePassword": {
      "type": "secureString",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Your password must contain at least 8 characters: a number, a special symbol, an upper and lower case letter."
      }
    },
    "storageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new storage account should be provisioned."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('teamcity', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage account type"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new virtual network should be provisioned."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "teamcity-vnet",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/16"
      ],
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new public ip should be provisioned."
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "teamcity-pip",
      "metadata": {
        "description": "Public IP name for the TeamCity."
      }
    },
    "publicIpDns": {
      "type": "string",
      "defaultValue": "[concat('teamcity-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Domain name for the TeamCity."
      }
    },
    "publicIpResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the public ip address"
      }
    },
    "domainOwnerEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "E-mail address to report problems regarding SSL certificate issuing for domain."
      }
    }
  },
  "variables": {
    "publicIpName": "[parameters('publicIpName')]",
    "publicIpAddressId": {
      "id": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
    },
    "domainName": "[concat(parameters('publicIpDns'), '.', resourceGroup().location, '.cloudapp.azure.com')]",
    "vmName": "[parameters('vmName')]",
    "networkName": "[concat(variables('vmName'), '-net')]",
    "networkSecurityGroupName": "[concat(variables('vmName'), '-nsg')]",
    "vmDataDisk": "[if(equals(parameters('installationSize'), 'Small'), 32, if(equals(parameters('installationSize'), 'Medium'), 64, 128))]",
    "storageType": "[if(contains(toLower(substring(parameters('vmSize'), 9)), 's'), 'Premium_LRS', 'Standard_LRS')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('VMAdminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "dbServerName": "[concat(variables('vmName'), '-', uniqueString(resourceGroup().id))]",
    "dbName": "teamcitydb",
    "databaseSku": "[if(equals(parameters('installationSize'), 'Small'), 'B_Gen5_1', if(equals(parameters('installationSize'), 'Medium'), 'B_Gen5_2', 'GP_Gen5_2'))]",
    "databaseTier": "[if(equals(parameters('installationSize'), 'Small'), 'Basic', if(equals(parameters('installationSize'), 'Medium'), 'Basic', 'GeneralPurpose'))]",
    "databaseCapacity": "[if(equals(parameters('installationSize'), 'Small'), 1, if(equals(parameters('installationSize'), 'Medium'), 2, 2))]",
    "databaseSizeMB": "[if(equals(parameters('installationSize'), 'Small'), 51200, if(equals(parameters('installationSize'), 'Medium'), 51200, 128000))]",
    "contributorRoleId": "[guid(resourceId('Microsoft.Compute/virtualMachines/', variables('vmName')))]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "pid-72b12eed-d5f1-45ab-b4d4-e7036f99ed87",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2017-08-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('publicIpDns')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2017-09-01",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "apiVersion": "2017-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1020,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "default-allow-http",
            "properties": {
              "priority": 1010,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80"
            }
          },
          {
            "name": "default-allow-https",
            "properties": {
              "priority": 1000,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('publicIpName')]",
        "[parameters('virtualNetworkName')]"
      ],
      "apiVersion": "2016-09-01",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('vmName'), '-config')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]",
              "subnet": {
                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.DBforMySQL/servers",
      "name": "[variables('dbServerName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2017-12-01",
      "properties": {
        "version": "5.7",
        "administratorLogin": "teamcity",
        "administratorLoginPassword": "[parameters('databasePassword')]",
        "storageProfile": {
          "storageMB": "[variables('databaseSizeMB')]",
          "geoRedundantBackup": "Disabled"
        },
        "sslEnforcement": "Disabled"
      },
      "sku": {
        "name": "[variables('databaseSku')]",
        "tier": "[variables('databaseTier')]",
        "capacity": "[variables('databaseCapacity')]",
        "size": "[variables('databaseSizeMB')]",
        "family": "Gen5"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "location": "[parameters('location')]",
          "name": "firewall",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "databases",
          "name": "[variables('dbName')]",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "charset": "utf8",
            "collation": "utf8_general_ci"
          }
        },
        {
          "type": "configurations",
          "name": "long_query_time",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "5",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "name": "slow_query_log",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "ON",
            "source": "user-override"
          }
        },
        {
          "type": "configurations",
          "name": "max_allowed_packet",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "properties": {
            "value": "16777216",
            "source": "user-override"
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('storageNewOrExisting'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "plan": {
        "name": "[variables('vmName')]",
        "publisher": "JetBrains",
        "product": "TeamCity-flatcar-container-linux"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkName'))]",
        "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ],
      "apiVersion": "2017-12-01",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('VMAdminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "customData": "[base64...]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "kinvolk",
            "offer": "flatcar-container-linux",
            "sku": "stable",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmName'), '-os')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('storageType')]"
            }
          },
          "dataDisks": [
            {
              "name": "[concat(variables('vmName'), '-data')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "diskSizeGB": "[variables('vmDataDisk')]",
              "lun": 0,
              "managedDisk": {
                "storageAccountType": "[variables('storageType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkName'))]"
            }
          ]
        }
      },
      "identity": {
        "type": "systemAssigned"
      },
      "tags": {
        "teamcity-version": "[toLower(trim(parameters('teamcityVersion')))]"
      }
    },
    {
      "apiVersion": "2016-07-01",
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[variables('contributorRoleId')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', variables('vmName')), '2017-03-30', 'Full').identity.principalId]",
        "scope": "[concat(subscription().id, '/resourceGroups/', resourceGroup().name)]"
      }
    }
  ],
  "outputs": {
    "teamcityURL": {
      "type": "string",
      "value": "[concat('https://', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    },
    "SSH": {
      "type": "string",
      "value": "[concat('ssh ', parameters('VMAdminUsername'), '@', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    }
  }
}
